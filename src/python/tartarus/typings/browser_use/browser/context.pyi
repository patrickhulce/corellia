"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional, TYPE_CHECKING, TypedDict
from playwright.async_api import BrowserContext as PlaywrightBrowserContext, ElementHandle, Page
from browser_use.browser.views import BrowserState, TabInfo
from browser_use.dom.views import DOMElementNode, SelectorMap
from browser_use.utils import time_execution_async, time_execution_sync
from browser_use.browser.browser import Browser

"""
Playwright browser on steroids.
"""
if TYPE_CHECKING:
	...
logger = ...
class BrowserContextWindowSize(TypedDict):
	width: int
	height: int
	...


@dataclass
class BrowserContextConfig:
	"""
	Configuration for the BrowserContext.

	Default values:
	    cookies_file: None
	        Path to cookies file for persistence

	        disable_security: True
	                Disable browser security features

	    minimum_wait_page_load_time: 0.5
	        Minimum time to wait before getting page state for LLM input

	        wait_for_network_idle_page_load_time: 1.0
	                Time to wait for network requests to finish before getting page state.
	                Lower values may result in incomplete page loads.

	    maximum_wait_page_load_time: 5.0
	        Maximum time to wait for page load before proceeding anyway

	    wait_between_actions: 1.0
	        Time to wait between multiple per step actions

	    browser_window_size: {
	            'width': 1280,
	            'height': 1100,
	        }
	        Default browser window size

	    no_viewport: False
	        Disable viewport

	    save_recording_path: None
	        Path to save video recordings

	    save_downloads_path: None
	        Path to save downloads to

	    trace_path: None
	        Path to save trace files. It will auto name the file with the TRACE_PATH/{context_id}.zip

	    locale: None
	        Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules. If not provided, defaults to the system default locale.

	    user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36'
	        custom user agent to use.

	    highlight_elements: True
	        Highlight elements in the DOM on the screen

	    viewport_expansion: 500
	        Viewport expansion in pixels. This amount will increase the number of elements which are included in the state what the LLM will see. If set to -1, all elements will be included (this leads to high token usage). If set to 0, only the elements which are visible in the viewport will be included.

	    allowed_domains: None
	        List of allowed domains that can be accessed. If None, all domains are allowed.
	        Example: ['example.com', 'api.example.com']

	    include_dynamic_attributes: bool = True
	        Include dynamic attributes in the CSS selector. If you want to reuse the css_selectors, it might be better to set this to False.
	"""
	cookies_file: str | None = ...
	minimum_wait_page_load_time: float = ...
	wait_for_network_idle_page_load_time: float = ...
	maximum_wait_page_load_time: float = ...
	wait_between_actions: float = ...
	disable_security: bool = ...
	browser_window_size: BrowserContextWindowSize = ...
	no_viewport: Optional[bool] = ...
	save_recording_path: str | None = ...
	save_downloads_path: str | None = ...
	trace_path: str | None = ...
	locale: str | None = ...
	user_agent: str = ...
	highlight_elements: bool = ...
	viewport_expansion: int = ...
	allowed_domains: list[str] | None = ...
	include_dynamic_attributes: bool = ...
	_force_keep_context_alive: bool = ...


@dataclass
class BrowserSession:
	context: PlaywrightBrowserContext
	cached_state: BrowserState | None
	...


@dataclass
class BrowserContextState:
	"""
	State of the browser context
	"""
	target_id: str | None = ...


class BrowserContext:
	def __init__(self, browser: Browser, config: BrowserContextConfig = ..., state: Optional[BrowserContextState] = ...) -> None:
		...
	
	async def __aenter__(self): # -> Self:
		"""Async context manager entry"""
		...
	
	async def __aexit__(self, exc_type, exc_val, exc_tb): # -> None:
		"""Async context manager exit"""
		...
	
	@time_execution_async('--close')
	async def close(self): # -> None:
		"""Close the browser instance"""
		...
	
	def __del__(self): # -> None:
		"""Cleanup when object is destroyed"""
		...
	
	async def get_session(self) -> BrowserSession:
		"""Lazy initialization of the browser and related components"""
		...
	
	async def get_current_page(self) -> Page:
		"""Get the current page"""
		...
	
	async def navigate_to(self, url: str): # -> None:
		"""Navigate to a URL"""
		...
	
	async def refresh_page(self): # -> None:
		"""Refresh the current page"""
		...
	
	async def go_back(self): # -> None:
		"""Navigate back in history"""
		...
	
	async def go_forward(self): # -> None:
		"""Navigate forward in history"""
		...
	
	async def close_current_tab(self): # -> None:
		"""Close the current tab"""
		...
	
	async def get_page_html(self) -> str:
		"""Get the current page HTML content"""
		...
	
	async def execute_javascript(self, script: str): # -> Any:
		"""Execute JavaScript code on the page"""
		...
	
	@time_execution_sync('--get_state')
	async def get_state(self) -> BrowserState:
		"""Get the current state of the browser"""
		...
	
	@time_execution_async('--take_screenshot')
	async def take_screenshot(self, full_page: bool = ...) -> str:
		"""
		Returns a base64 encoded screenshot of the current page.
		"""
		...
	
	@time_execution_async('--remove_highlights')
	async def remove_highlights(self): # -> None:
		"""
		Removes all highlight overlays and labels created by the highlightElement function.
		Handles cases where the page might be closed or inaccessible.
		"""
		...
	
	@time_execution_async('--get_locate_element')
	async def get_locate_element(self, element: DOMElementNode) -> Optional[ElementHandle]:
		...
	
	@time_execution_async('--get_tabs_info')
	async def get_tabs_info(self) -> list[TabInfo]:
		"""Get information about all tabs"""
		...
	
	@time_execution_async('--switch_to_tab')
	async def switch_to_tab(self, page_id: int) -> None:
		"""Switch to a specific tab by its page_id"""
		...
	
	@time_execution_async('--create_new_tab')
	async def create_new_tab(self, url: str | None = ...) -> None:
		"""Create a new tab and optionally navigate to a URL"""
		...
	
	async def get_selector_map(self) -> SelectorMap:
		...
	
	async def get_element_by_index(self, index: int) -> ElementHandle | None:
		...
	
	async def get_dom_element_by_index(self, index: int) -> DOMElementNode:
		...
	
	async def save_cookies(self): # -> None:
		"""Save current cookies to file"""
		...
	
	async def is_file_uploader(self, element_node: DOMElementNode, max_depth: int = ..., current_depth: int = ...) -> bool:
		"""Check if element or its children are file uploaders"""
		...
	
	async def get_scroll_info(self, page: Page) -> tuple[int, int]:
		"""Get scroll position information for the current page."""
		...
	
	async def reset_context(self): # -> None:
		"""Reset the browser session
		Call this when you don't want to kill the context but just kill the state
		"""
		...
	


