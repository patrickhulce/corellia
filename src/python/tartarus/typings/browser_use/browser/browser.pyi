"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from playwright._impl._api_structures import ProxySettings
from playwright.async_api import Browser as PlaywrightBrowser
from browser_use.browser.context import BrowserContext, BrowserContextConfig

"""
Playwright browser on steroids.
"""
logger = ...
@dataclass
class BrowserConfig:
	r"""
	Configuration for the Browser.

	Default values:
		headless: True
			Whether to run browser in headless mode

		disable_security: True
			Disable browser security features

		extra_chromium_args: []
			Extra arguments to pass to the browser

		wss_url: None
			Connect to a browser instance via WebSocket

		cdp_url: None
			Connect to a browser instance via CDP

		chrome_instance_path: None
			Path to a Chrome instance to use to connect to your normal browser
			e.g. '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'
	"""
	headless: bool = ...
	disable_security: bool = ...
	extra_chromium_args: list[str] = ...
	chrome_instance_path: str | None = ...
	wss_url: str | None = ...
	cdp_url: str | None = ...
	proxy: ProxySettings | None = ...
	new_context_config: BrowserContextConfig = ...
	_force_keep_browser_alive: bool = ...


class Browser:
	"""
	Playwright browser on steroids.

	This is persistant browser factory that can spawn multiple browser contexts.
	It is recommended to use only one instance of Browser per your application (RAM usage will grow otherwise).
	"""
	def __init__(self, config: BrowserConfig = ...) -> None:
		...
	
	async def new_context(self, config: BrowserContextConfig = ...) -> BrowserContext:
		"""Create a browser context"""
		...
	
	async def get_playwright_browser(self) -> PlaywrightBrowser:
		"""Get a browser context"""
		...
	
	async def close(self): # -> None:
		"""Close the browser instance"""
		...
	
	def __del__(self): # -> None:
		"""Async cleanup when object is destroyed"""
		...
	


