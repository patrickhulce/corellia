"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from functools import cached_property
from typing import Dict, List, Optional, TYPE_CHECKING
from browser_use.dom.history_tree_processor.view import CoordinateSet, HashedDomElement, ViewportInfo
from browser_use.utils import time_execution_sync
from .views import DOMElementNode

if TYPE_CHECKING:
	...
@dataclass(frozen=False)
class DOMBaseNode:
	is_visible: bool
	parent: Optional[DOMElementNode]
	...


@dataclass(frozen=False)
class DOMTextNode(DOMBaseNode):
	text: str
	type: str = ...
	def has_parent_with_highlight_index(self) -> bool:
		...
	
	def is_parent_in_viewport(self) -> bool:
		...
	
	def is_parent_top_element(self) -> bool:
		...
	


@dataclass(frozen=False)
class DOMElementNode(DOMBaseNode):
	"""
	xpath: the xpath of the element from the last root node (shadow root or iframe OR document if no shadow root or iframe).
	To properly reference the element we need to recursively switch the root node until we find the element (work you way up the tree with `.parent`)
	"""
	tag_name: str
	xpath: str
	attributes: Dict[str, str]
	children: List[DOMBaseNode]
	is_interactive: bool = ...
	is_top_element: bool = ...
	is_in_viewport: bool = ...
	shadow_root: bool = ...
	highlight_index: Optional[int] = ...
	viewport_coordinates: Optional[CoordinateSet] = ...
	page_coordinates: Optional[CoordinateSet] = ...
	viewport_info: Optional[ViewportInfo] = ...
	def __repr__(self) -> str:
		...
	
	@cached_property
	def hash(self) -> HashedDomElement:
		...
	
	def get_all_text_till_next_clickable_element(self, max_depth: int = ...) -> str:
		...
	
	@time_execution_sync('--clickable_elements_to_string')
	def clickable_elements_to_string(self, include_attributes: list[str] = ...) -> str:
		"""Convert the processed DOM content to HTML."""
		...
	
	def get_file_upload_element(self, check_siblings: bool = ...) -> Optional[DOMElementNode]:
		...
	


SelectorMap = dict[int, DOMElementNode]
@dataclass
class DOMState:
	element_tree: DOMElementNode
	selector_map: SelectorMap
	...


