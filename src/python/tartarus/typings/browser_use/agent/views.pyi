"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, Literal, Optional, Type
from langchain_core.language_models.chat_models import BaseChatModel
from pydantic import BaseModel
from browser_use.agent.message_manager.views import MessageManagerState
from browser_use.agent.prompts import SystemPrompt
from browser_use.browser.views import BrowserStateHistory
from browser_use.controller.registry.views import ActionModel
from browser_use.dom.history_tree_processor.service import DOMHistoryElement
from browser_use.dom.views import SelectorMap

ToolCallingMethod = Literal['function_calling', 'json_mode', 'raw', 'auto']
class AgentSettings(BaseModel):
	"""Options for the agent"""
	use_vision: bool = ...
	use_vision_for_planner: bool = ...
	save_conversation_path: Optional[str] = ...
	save_conversation_path_encoding: Optional[str] = ...
	max_failures: int = ...
	retry_delay: int = ...
	system_prompt_class: Type[SystemPrompt] = ...
	max_input_tokens: int = ...
	validate_output: bool = ...
	message_context: Optional[str] = ...
	generate_gif: bool | str = ...
	available_file_paths: Optional[list[str]] = ...
	include_attributes: list[str] = ...
	max_actions_per_step: int = ...
	tool_calling_method: Optional[ToolCallingMethod] = ...
	page_extraction_llm: Optional[BaseChatModel] = ...
	planner_llm: Optional[BaseChatModel] = ...
	planner_interval: int = ...


class AgentState(BaseModel):
	"""Holds all state information for an Agent"""
	agent_id: str = ...
	n_steps: int = ...
	consecutive_failures: int = ...
	last_result: Optional[List[ActionResult]] = ...
	history: AgentHistoryList = ...
	last_plan: Optional[str] = ...
	paused: bool = ...
	stopped: bool = ...
	message_manager_state: MessageManagerState = ...


@dataclass
class AgentStepInfo:
	step_number: int
	max_steps: int
	def is_last_step(self) -> bool:
		"""Check if this is the last step"""
		...
	


class ActionResult(BaseModel):
	"""Result of executing an action"""
	is_done: Optional[bool] = ...
	success: Optional[bool] = ...
	extracted_content: Optional[str] = ...
	error: Optional[str] = ...
	include_in_memory: bool = ...


class StepMetadata(BaseModel):
	"""Metadata for a single step including timing and token information"""
	step_start_time: float
	step_end_time: float
	input_tokens: int
	step_number: int
	@property
	def duration_seconds(self) -> float:
		"""Calculate step duration in seconds"""
		...
	


class AgentBrain(BaseModel):
	"""Current state of the agent"""
	evaluation_previous_goal: str
	memory: str
	next_goal: str
	...


class AgentOutput(BaseModel):
	"""Output model for agent

	@dev note: this model is extended with custom actions in AgentService. You can also use some fields that are not in this model as provided by the linter, as long as they are registered in the DynamicActions model.
	"""
	model_config = ...
	current_state: AgentBrain
	action: list[ActionModel] = ...
	@staticmethod
	def type_with_custom_actions(custom_actions: Type[ActionModel]) -> Type[AgentOutput]:
		"""Extend actions with custom actions"""
		...
	


class AgentHistory(BaseModel):
	"""History item for agent actions"""
	model_output: AgentOutput | None
	result: list[ActionResult]
	state: BrowserStateHistory
	metadata: Optional[StepMetadata] = ...
	model_config = ...
	@staticmethod
	def get_interacted_element(model_output: AgentOutput, selector_map: SelectorMap) -> list[DOMHistoryElement | None]:
		...
	
	def model_dump(self, **kwargs) -> Dict[str, Any]:
		"""Custom serialization handling circular references"""
		...
	


class AgentHistoryList(BaseModel):
	"""List of agent history items"""
	history: list[AgentHistory]
	def total_duration_seconds(self) -> float:
		"""Get total duration of all steps in seconds"""
		...
	
	def total_input_tokens(self) -> int:
		"""
		Get total tokens used across all steps.
		Note: These are from the approximate token counting of the message manager.
		For accurate token counting, use tools like LangChain Smith or OpenAI's token counters.
		"""
		...
	
	def input_token_usage(self) -> list[int]:
		"""Get token usage for each step"""
		...
	
	def __str__(self) -> str:
		"""Representation of the AgentHistoryList object"""
		...
	
	def __repr__(self) -> str:
		"""Representation of the AgentHistoryList object"""
		...
	
	def save_to_file(self, filepath: str | Path) -> None:
		"""Save history to JSON file with proper serialization"""
		...
	
	def model_dump(self, **kwargs) -> Dict[str, Any]:
		"""Custom serialization that properly uses AgentHistory's model_dump"""
		...
	
	@classmethod
	def load_from_file(cls, filepath: str | Path, output_model: Type[AgentOutput]) -> AgentHistoryList:
		"""Load history from JSON file"""
		...
	
	def last_action(self) -> None | dict:
		"""Last action in history"""
		...
	
	def errors(self) -> list[str | None]:
		"""Get all errors from history, with None for steps without errors"""
		...
	
	def final_result(self) -> None | str:
		"""Final result from history"""
		...
	
	def is_done(self) -> bool:
		"""Check if the agent is done"""
		...
	
	def is_successful(self) -> bool | None:
		"""Check if the agent completed successfully - the agent decides in the last step if it was successful or not. None if not done yet."""
		...
	
	def has_errors(self) -> bool:
		"""Check if the agent has any non-None errors"""
		...
	
	def urls(self) -> list[str | None]:
		"""Get all unique URLs from history"""
		...
	
	def screenshots(self) -> list[str | None]:
		"""Get all screenshots from history"""
		...
	
	def action_names(self) -> list[str]:
		"""Get all action names from history"""
		...
	
	def model_thoughts(self) -> list[AgentBrain]:
		"""Get all thoughts from history"""
		...
	
	def model_outputs(self) -> list[AgentOutput]:
		"""Get all model outputs from history"""
		...
	
	def model_actions(self) -> list[dict]:
		"""Get all actions from history"""
		...
	
	def action_results(self) -> list[ActionResult]:
		"""Get all results from history"""
		...
	
	def extracted_content(self) -> list[str]:
		"""Get all extracted content from history"""
		...
	
	def model_actions_filtered(self, include: list[str] = ...) -> list[dict]:
		"""Get all model actions from history as JSON"""
		...
	
	def number_of_steps(self) -> int:
		"""Get the number of steps in the history"""
		...
	


class AgentError:
	"""Container for agent error handling"""
	VALIDATION_ERROR = ...
	RATE_LIMIT_ERROR = ...
	NO_VALID_ACTION = ...
	@staticmethod
	def format_error(error: Exception, include_trace: bool = ...) -> str:
		"""Format error message based on error type and optionally include trace"""
		...
	


