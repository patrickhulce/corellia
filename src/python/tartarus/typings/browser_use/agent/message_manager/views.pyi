"""
This type stub file was generated by pyright.
"""

from typing import Any, TYPE_CHECKING
from langchain_core.messages import BaseMessage
from pydantic import BaseModel, model_serializer, model_validator
from browser_use.agent.views import AgentOutput

if TYPE_CHECKING:
	...
class MessageMetadata(BaseModel):
	"""Metadata for a message"""
	tokens: int = ...


class ManagedMessage(BaseModel):
	"""A message with its metadata"""
	message: BaseMessage
	metadata: MessageMetadata = ...
	model_config = ...
	@model_serializer(mode='wrap')
	def to_json(self, original_dump):
		"""
		Returns the JSON representation of the model.

		It uses langchain's `dumps` function to serialize the `message`
		property before encoding the overall dict with json.dumps.
		"""
		...
	
	@model_validator(mode='before')
	@classmethod
	def validate(cls, value: Any, *, strict: bool | None = ..., from_attributes: bool | None = ..., context: Any | None = ...) -> Any:
		"""
		Custom validator that uses langchain's `loads` function
		to parse the message if it is provided as a JSON string.
		"""
		...
	


class MessageHistory(BaseModel):
	"""History of messages with metadata"""
	messages: list[ManagedMessage] = ...
	current_tokens: int = ...
	model_config = ...
	def add_message(self, message: BaseMessage, metadata: MessageMetadata, position: int | None = ...) -> None:
		"""Add message with metadata to history"""
		...
	
	def add_model_output(self, output: AgentOutput) -> None:
		"""Add model output as AI message"""
		...
	
	def get_messages(self) -> list[BaseMessage]:
		"""Get all messages"""
		...
	
	def get_total_tokens(self) -> int:
		"""Get total tokens in history"""
		...
	
	def remove_oldest_message(self) -> None:
		"""Remove oldest non-system message"""
		...
	
	def remove_last_state_message(self) -> None:
		"""Remove last state message from history"""
		...
	


class MessageManagerState(BaseModel):
	"""Holds the state for MessageManager"""
	history: MessageHistory = ...
	tool_id: int = ...
	model_config = ...


