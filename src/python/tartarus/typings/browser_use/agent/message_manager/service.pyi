"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Optional
from langchain_core.messages import BaseMessage, SystemMessage
from pydantic import BaseModel
from browser_use.agent.views import ActionResult, AgentOutput, AgentStepInfo, MessageManagerState
from browser_use.browser.views import BrowserState
from browser_use.utils import time_execution_sync

logger = ...
class MessageManagerSettings(BaseModel):
	max_input_tokens: int = ...
	estimated_characters_per_token: int = ...
	image_tokens: int = ...
	include_attributes: list[str] = ...
	message_context: Optional[str] = ...
	sensitive_data: Optional[Dict[str, str]] = ...
	available_file_paths: Optional[List[str]] = ...


class MessageManager:
	def __init__(self, task: str, system_message: SystemMessage, settings: MessageManagerSettings = ..., state: MessageManagerState = ...) -> None:
		...
	
	def add_new_task(self, new_task: str) -> None:
		...
	
	@time_execution_sync('--add_state_message')
	def add_state_message(self, state: BrowserState, result: Optional[List[ActionResult]] = ..., step_info: Optional[AgentStepInfo] = ..., use_vision=...) -> None:
		"""Add browser state as human message"""
		...
	
	def add_model_output(self, model_output: AgentOutput) -> None:
		"""Add model output as AI message"""
		...
	
	def add_plan(self, plan: Optional[str], position: int | None = ...) -> None:
		...
	
	@time_execution_sync('--get_messages')
	def get_messages(self) -> List[BaseMessage]:
		"""Get current message list, potentially trimmed to max tokens"""
		...
	
	def cut_messages(self): # -> None:
		"""Get current message list, potentially trimmed to max tokens"""
		...
	
	def add_tool_message(self, content: str) -> None:
		"""Add tool message to history"""
		...
	


