"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any, Awaitable, Callable, Dict, Generic, List, Optional, Type, TypeVar
from langchain_core.language_models.chat_models import BaseChatModel
from langchain_core.messages import BaseMessage
from browser_use.agent.message_manager.service import MessageManager
from browser_use.agent.prompts import SystemPrompt
from browser_use.agent.views import ActionResult, AgentHistoryList, AgentOutput, AgentState, AgentStepInfo, ToolCallingMethod
from browser_use.browser.browser import Browser
from browser_use.browser.context import BrowserContext
from browser_use.browser.views import BrowserState
from browser_use.controller.registry.views import ActionModel
from browser_use.controller.service import Controller
from browser_use.utils import time_execution_async, time_execution_sync

logger = ...
def log_response(response: AgentOutput) -> None:
	"""Utility function to log the model's response."""
	...

Context = TypeVar('Context')
class Agent(Generic[Context]):
	@time_execution_sync('--init (agent)')
	def __init__(self, task: str, llm: BaseChatModel, browser: Browser | None = ..., browser_context: BrowserContext | None = ..., controller: Controller[Context] = ..., sensitive_data: Optional[Dict[str, str]] = ..., initial_actions: Optional[List[Dict[str, Dict[str, Any]]]] = ..., register_new_step_callback: Callable[[BrowserState, AgentOutput, int], Awaitable[None]] | None = ..., register_done_callback: Callable[[AgentHistoryList], Awaitable[None]] | None = ..., register_external_agent_status_raise_error_callback: Callable[[], Awaitable[bool]] | None = ..., use_vision: bool = ..., use_vision_for_planner: bool = ..., save_conversation_path: Optional[str] = ..., save_conversation_path_encoding: Optional[str] = ..., max_failures: int = ..., retry_delay: int = ..., system_prompt_class: Type[SystemPrompt] = ..., max_input_tokens: int = ..., validate_output: bool = ..., message_context: Optional[str] = ..., generate_gif: bool | str = ..., available_file_paths: Optional[list[str]] = ..., include_attributes: list[str] = ..., max_actions_per_step: int = ..., tool_calling_method: Optional[ToolCallingMethod] = ..., page_extraction_llm: Optional[BaseChatModel] = ..., planner_llm: Optional[BaseChatModel] = ..., planner_interval: int = ..., injected_agent_state: Optional[AgentState] = ..., context: Context | None = ...) -> None:
		...
	
	def add_new_task(self, new_task: str) -> None:
		...
	
	@time_execution_async('--step (agent)')
	async def step(self, step_info: Optional[AgentStepInfo] = ...) -> None:
		"""Execute one step of the task"""
		...
	
	THINK_TAGS = ...
	@time_execution_async('--get_next_action (agent)')
	async def get_next_action(self, input_messages: list[BaseMessage]) -> AgentOutput:
		"""Get next action from LLM based on current state"""
		...
	
	async def take_step(self) -> tuple[bool, bool]:
		"""Take a step

		Returns:
			Tuple[bool, bool]: (is_done, is_valid)
		"""
		...
	
	@time_execution_async('--run (agent)')
	async def run(self, max_steps: int = ...) -> AgentHistoryList:
		"""Execute the task with maximum number of steps"""
		...
	
	@time_execution_async('--multi-act (agent)')
	async def multi_act(self, actions: list[ActionModel], check_for_new_elements: bool = ...) -> list[ActionResult]:
		"""Execute multiple actions"""
		...
	
	async def log_completion(self) -> None:
		"""Log the completion of the task"""
		...
	
	async def rerun_history(self, history: AgentHistoryList, max_retries: int = ..., skip_failures: bool = ..., delay_between_actions: float = ...) -> list[ActionResult]:
		"""
		Rerun a saved history of actions with error handling and retry logic.

		Args:
				history: The history to replay
				max_retries: Maximum number of retries per action
				skip_failures: Whether to skip failed actions or stop execution
				delay_between_actions: Delay between actions in seconds

		Returns:
				List of action results
		"""
		...
	
	async def load_and_rerun(self, history_file: Optional[str | Path] = ..., **kwargs) -> list[ActionResult]:
		"""
		Load history from file and rerun it.

		Args:
				history_file: Path to the history file
				**kwargs: Additional arguments passed to rerun_history
		"""
		...
	
	def save_history(self, file_path: Optional[str | Path] = ...) -> None:
		"""Save the history to a file"""
		...
	
	def pause(self) -> None:
		"""Pause the agent before the next step"""
		...
	
	def resume(self) -> None:
		"""Resume the agent"""
		...
	
	def stop(self) -> None:
		"""Stop the agent"""
		...
	
	@property
	def message_manager(self) -> MessageManager:
		...
	


