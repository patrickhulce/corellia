"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Generic, Optional, Type, TypeVar
from langchain_core.language_models.chat_models import BaseChatModel
from pydantic import BaseModel
from browser_use.browser.context import BrowserContext
from browser_use.controller.registry.views import ActionModel
from browser_use.utils import time_execution_async, time_execution_sync

Context = TypeVar('Context')
class Registry(Generic[Context]):
	"""Service for registering and managing actions"""
	def __init__(self, exclude_actions: list[str] = ...) -> None:
		...
	
	def action(self, description: str, param_model: Optional[Type[BaseModel]] = ...): # -> Callable[..., Callable[..., Any]]:
		"""Decorator for registering actions"""
		...
	
	@time_execution_async('--execute_action')
	async def execute_action(self, action_name: str, params: dict, browser: Optional[BrowserContext] = ..., page_extraction_llm: Optional[BaseChatModel] = ..., sensitive_data: Optional[Dict[str, str]] = ..., available_file_paths: Optional[list[str]] = ..., context: Context | None = ...) -> Any:
		"""Execute a registered action"""
		...
	
	@time_execution_sync('--create_action_model')
	def create_action_model(self, include_actions: Optional[list[str]] = ...) -> Type[ActionModel]:
		"""Creates a Pydantic model from registered actions"""
		...
	
	def get_prompt_description(self) -> str:
		"""Get a description of all actions for the prompt"""
		...
	


