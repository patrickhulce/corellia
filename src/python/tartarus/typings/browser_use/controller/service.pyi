"""
This type stub file was generated by pyright.
"""

from typing import Dict, Generic, Optional, Type, TypeVar
from langchain_core.language_models.chat_models import BaseChatModel
from pydantic import BaseModel
from browser_use.agent.views import ActionModel, ActionResult
from browser_use.browser.context import BrowserContext
from browser_use.utils import time_execution_sync

logger = ...
Context = TypeVar('Context')
class Controller(Generic[Context]):
	def __init__(self, exclude_actions: list[str] = ..., output_model: Optional[Type[BaseModel]] = ...) -> None:
		...
	
	def action(self, description: str, **kwargs): # -> Callable[..., Callable[..., Any]]:
		"""Decorator for registering custom actions

		@param description: Describe the LLM what the function does (better description == better function calling)
		"""
		...
	
	@time_execution_sync('--act')
	async def act(self, action: ActionModel, browser_context: BrowserContext, page_extraction_llm: Optional[BaseChatModel] = ..., sensitive_data: Optional[Dict[str, str]] = ..., available_file_paths: Optional[list[str]] = ..., context: Context | None = ...) -> ActionResult:
		"""Execute an action"""
		...
	


